# coding: utf-8

"""
    NCBI Datasets API

    ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ncbi.datasets.openapi.models.v2_fasta import V2Fasta
from ncbi.datasets.openapi.models.v2_prokaryote_gene_request_gene_flank_config import V2ProkaryoteGeneRequestGeneFlankConfig
from typing import Optional, Set
from typing_extensions import Self

class V2ProkaryoteGeneRequest(BaseModel):
    """
    V2ProkaryoteGeneRequest
    """ # noqa: E501
    accessions: Optional[List[StrictStr]] = None
    include_annotation_type: Optional[List[V2Fasta]] = None
    gene_flank_config: Optional[V2ProkaryoteGeneRequestGeneFlankConfig] = None
    taxon: Optional[StrictStr] = None
    __properties: ClassVar[List[str]] = ["accessions", "include_annotation_type", "gene_flank_config", "taxon"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2ProkaryoteGeneRequest from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of gene_flank_config
        if self.gene_flank_config:
            _dict['gene_flank_config'] = self.gene_flank_config.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2ProkaryoteGeneRequest from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "accessions": obj.get("accessions"),
            "include_annotation_type": obj.get("include_annotation_type"),
            "gene_flank_config": V2ProkaryoteGeneRequestGeneFlankConfig.from_dict(obj["gene_flank_config"]) if obj.get("gene_flank_config") is not None else None,
            "taxon": obj.get("taxon")
        })
        return _obj


