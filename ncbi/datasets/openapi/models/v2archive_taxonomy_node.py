# coding: utf-8

"""
    NCBI Datasets API

    ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from ncbi.datasets.openapi.models.v2archive_modifier import V2archiveModifier
from ncbi.datasets.openapi.models.v2reports_classification import V2reportsClassification
from ncbi.datasets.openapi.models.v2reports_name_and_authority import V2reportsNameAndAuthority
from typing import Optional, Set
from typing_extensions import Self

class V2archiveTaxonomyNode(BaseModel):
    """
    V2archiveTaxonomyNode
    """ # noqa: E501
    tax_id: Optional[StrictInt] = None
    current_scientific_name: Optional[V2reportsNameAndAuthority] = None
    basionym: Optional[V2reportsNameAndAuthority] = None
    curator_common_name: Optional[StrictStr] = None
    group_name: Optional[StrictStr] = None
    classification: Optional[V2reportsClassification] = None
    modifiers: Optional[List[V2archiveModifier]] = None
    __properties: ClassVar[List[str]] = ["tax_id", "current_scientific_name", "basionym", "curator_common_name", "group_name", "classification", "modifiers"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of V2archiveTaxonomyNode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of current_scientific_name
        if self.current_scientific_name:
            _dict['current_scientific_name'] = self.current_scientific_name.to_dict()
        # override the default output from pydantic by calling `to_dict()` of basionym
        if self.basionym:
            _dict['basionym'] = self.basionym.to_dict()
        # override the default output from pydantic by calling `to_dict()` of classification
        if self.classification:
            _dict['classification'] = self.classification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in modifiers (list)
        _items = []
        if self.modifiers:
            for _item_modifiers in self.modifiers:
                if _item_modifiers:
                    _items.append(_item_modifiers.to_dict())
            _dict['modifiers'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of V2archiveTaxonomyNode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "tax_id": obj.get("tax_id"),
            "current_scientific_name": V2reportsNameAndAuthority.from_dict(obj["current_scientific_name"]) if obj.get("current_scientific_name") is not None else None,
            "basionym": V2reportsNameAndAuthority.from_dict(obj["basionym"]) if obj.get("basionym") is not None else None,
            "curator_common_name": obj.get("curator_common_name"),
            "group_name": obj.get("group_name"),
            "classification": V2reportsClassification.from_dict(obj["classification"]) if obj.get("classification") is not None else None,
            "modifiers": [V2archiveModifier.from_dict(_item) for _item in obj["modifiers"]] if obj.get("modifiers") is not None else None
        })
        return _obj


