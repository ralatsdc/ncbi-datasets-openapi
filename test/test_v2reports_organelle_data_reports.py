# coding: utf-8

"""
    NCBI Datasets API

    ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ncbi.datasets.openapi.models.v2reports_organelle_data_reports import V2reportsOrganelleDataReports

class TestV2reportsOrganelleDataReports(unittest.TestCase):
    """V2reportsOrganelleDataReports unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2reportsOrganelleDataReports:
        """Test V2reportsOrganelleDataReports
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2reportsOrganelleDataReports`
        """
        model = V2reportsOrganelleDataReports()
        if include_optional:
            return V2reportsOrganelleDataReports(
                messages = [
                    ncbi.datasets.openapi.models.v2reports_message.v2reportsMessage(
                        error = ncbi.datasets.openapi.models.v2reports_error.v2reportsError(
                            assembly_error_code = 'UNKNOWN_ASSEMBLY_ERROR_CODE', 
                            gene_error_code = 'UNKNOWN_GENE_ERROR_CODE', 
                            organelle_error_code = 'UNKNOWN_ORGANELLE_ERROR_CODE', 
                            virus_error_code = 'UNKNOWN_VIRUS_ERROR_CODE', 
                            taxonomy_error_code = 'UNKNOWN_TAXONOMY_ERROR_CODE', 
                            reason = '', 
                            message = '', 
                            invalid_identifiers = [
                                ''
                                ], ), 
                        warning = ncbi.datasets.openapi.models.v2reports_warning.v2reportsWarning(
                            gene_warning_code = 'UNKNOWN_GENE_WARNING_CODE', 
                            reason = '', 
                            message = '', 
                            replaced_id = ncbi.datasets.openapi.models.v2reports_warning_replaced_id.v2reportsWarningReplacedId(
                                requested = '', 
                                returned = '', ), 
                            unrecognized_identifier = '', ), )
                    ],
                reports = [
                    ncbi.datasets.openapi.models.v2reports_organelle.v2reportsOrganelle(
                        description = 'ORGANELLE_TYPE_UNKNOWN', 
                        genbank = ncbi.datasets.openapi.models.v2reports_sequence_information.v2reportsSequenceInformation(
                            accession = '', 
                            submission_date = '', 
                            submitter = '', ), 
                        refseq = ncbi.datasets.openapi.models.v2reports_sequence_information.v2reportsSequenceInformation(
                            accession = '', 
                            submission_date = '', 
                            submitter = '', ), 
                        organism = ncbi.datasets.openapi.models.v2reports_organism.v2reportsOrganism(
                            tax_id = 56, 
                            sci_name = '', 
                            organism_name = '', 
                            common_name = '', 
                            lineage = [
                                ncbi.datasets.openapi.models.v2reports_lineage_organism.v2reportsLineageOrganism(
                                    tax_id = 56, 
                                    name = '', )
                                ], 
                            strain = '', 
                            pangolin_classification = '', 
                            infraspecific_names = ncbi.datasets.openapi.models.v2reports_infraspecific_names.v2reportsInfraspecificNames(
                                breed = '', 
                                cultivar = '', 
                                ecotype = '', 
                                isolate = '', 
                                sex = '', 
                                strain = '', ), ), 
                        bioprojects = [
                            ncbi.datasets.openapi.models.v2reports_bio_project.v2reportsBioProject(
                                accession = '', 
                                title = '', 
                                parent_accession = '', 
                                parent_accessions = [
                                    ''
                                    ], )
                            ], 
                        biosample = ncbi.datasets.openapi.models.v2reports_organelle_biosample.v2reportsOrganelleBiosample(
                            accession = '', ), 
                        gene_counts = ncbi.datasets.openapi.models.v2reports_organelle_gene_counts.v2reportsOrganelleGeneCounts(
                            total = 56, 
                            protein_coding = 56, 
                            rrna = 56, 
                            trna = 56, 
                            lncrna = 56, ), 
                        length = 56, 
                        topology = 'TOPOLOGY_UNKNOWN', 
                        gene_count = 56, )
                    ],
                total_count = 56,
                next_page_token = ''
            )
        else:
            return V2reportsOrganelleDataReports(
        )
        """

    def testV2reportsOrganelleDataReports(self):
        """Test V2reportsOrganelleDataReports"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
