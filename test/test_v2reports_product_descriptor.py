# coding: utf-8

"""
    NCBI Datasets API

    ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ncbi.datasets.openapi.models.v2reports_product_descriptor import V2reportsProductDescriptor

class TestV2reportsProductDescriptor(unittest.TestCase):
    """V2reportsProductDescriptor unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2reportsProductDescriptor:
        """Test V2reportsProductDescriptor
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2reportsProductDescriptor`
        """
        model = V2reportsProductDescriptor()
        if include_optional:
            return V2reportsProductDescriptor(
                gene_id = '',
                symbol = '',
                description = '',
                tax_id = '',
                taxname = '',
                common_name = '',
                type = 'UNKNOWN',
                rna_type = 'rna_UNKNOWN',
                transcripts = [
                    ncbi.datasets.openapi.models.v2reports_transcript.v2reportsTranscript(
                        accession_version = '', 
                        name = '', 
                        length = 56, 
                        cds = ncbi.datasets.openapi.models.v2reports_seq_range_set.v2reportsSeqRangeSet(
                            accession_version = '', 
                            range = [
                                ncbi.datasets.openapi.models.v2reports_range.v2reportsRange(
                                    begin = '', 
                                    end = '', 
                                    orientation = 'none', 
                                    order = 56, 
                                    ribosomal_slippage = 56, )
                                ], ), 
                        genomic_locations = [
                            ncbi.datasets.openapi.models.v2reports_genomic_location.v2reportsGenomicLocation(
                                genomic_accession_version = '', 
                                sequence_name = '', 
                                genomic_range = ncbi.datasets.openapi.models.v2reports_range.v2reportsRange(
                                    begin = '', 
                                    end = '', 
                                    order = 56, 
                                    ribosomal_slippage = 56, ), 
                                exons = [
                                    
                                    ], )
                            ], 
                        ensembl_transcript = '', 
                        protein = ncbi.datasets.openapi.models.v2reports_protein.v2reportsProtein(
                            accession_version = '', 
                            name = '', 
                            length = 56, 
                            isoform_name = '', 
                            ensembl_protein = '', 
                            mature_peptides = [
                                ncbi.datasets.openapi.models.v2reports_mature_peptide.v2reportsMaturePeptide(
                                    accession_version = '', 
                                    name = '', 
                                    length = 56, )
                                ], ), 
                        type = 'UNKNOWN', 
                        select_category = 'SELECT_UNKNOWN', )
                    ],
                transcript_count = 56,
                protein_count = 56,
                transcript_type_counts = [
                    ncbi.datasets.openapi.models.v2reports_transcript_type_count.v2reportsTranscriptTypeCount(
                        type = 'UNKNOWN', 
                        count = 56, )
                    ]
            )
        else:
            return V2reportsProductDescriptor(
        )
        """

    def testV2reportsProductDescriptor(self):
        """Test V2reportsProductDescriptor"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
