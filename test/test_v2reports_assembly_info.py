# coding: utf-8

"""
    NCBI Datasets API

    ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ncbi.datasets.openapi.models.v2reports_assembly_info import V2reportsAssemblyInfo

class TestV2reportsAssemblyInfo(unittest.TestCase):
    """V2reportsAssemblyInfo unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2reportsAssemblyInfo:
        """Test V2reportsAssemblyInfo
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2reportsAssemblyInfo`
        """
        model = V2reportsAssemblyInfo()
        if include_optional:
            return V2reportsAssemblyInfo(
                assembly_level = '',
                assembly_status = 'ASSEMBLY_STATUS_UNKNOWN',
                paired_assembly = ncbi.datasets.openapi.models.v2reports_paired_assembly.v2reportsPairedAssembly(
                    accession = '', 
                    status = 'ASSEMBLY_STATUS_UNKNOWN', 
                    annotation_name = '', 
                    only_genbank = '', 
                    only_refseq = '', 
                    changed = '', 
                    manual_diff = '', 
                    refseq_genbank_are_different = True, 
                    differences = '', ),
                assembly_name = '',
                assembly_long_name = '',
                assembly_type = '',
                bioproject_lineage = [
                    ncbi.datasets.openapi.models.v2reports_bio_project_lineage.v2reportsBioProjectLineage(
                        bioprojects = [
                            ncbi.datasets.openapi.models.v2reports_bio_project.v2reportsBioProject(
                                accession = '', 
                                title = '', 
                                parent_accession = '', 
                                parent_accessions = [
                                    ''
                                    ], )
                            ], )
                    ],
                bioproject_accession = '',
                submission_date = '',
                release_date = '',
                description = '',
                submitter = '',
                refseq_category = '',
                synonym = '',
                linked_assembly = '',
                linked_assemblies = [
                    ncbi.datasets.openapi.models.v2reports_linked_assembly.v2reportsLinkedAssembly(
                        linked_assembly = '', 
                        assembly_type = 'LINKED_ASSEMBLY_TYPE_UNKNOWN', )
                    ],
                atypical = ncbi.datasets.openapi.models.v2reports_atypical_info.v2reportsAtypicalInfo(
                    is_atypical = True, 
                    warnings = [
                        ''
                        ], ),
                genome_notes = [
                    ''
                    ],
                sequencing_tech = '',
                assembly_method = '',
                grouping_method = '',
                biosample = ncbi.datasets.openapi.models.v2reports_bio_sample_descriptor.v2reportsBioSampleDescriptor(
                    accession = '', 
                    last_updated = '', 
                    publication_date = '', 
                    submission_date = '', 
                    sample_ids = [
                        ncbi.datasets.openapi.models.v2reports_bio_sample_id.v2reportsBioSampleId(
                            db = '', 
                            label = '', 
                            value = '', )
                        ], 
                    description = ncbi.datasets.openapi.models.v2reports_bio_sample_description.v2reportsBioSampleDescription(
                        title = '', 
                        organism = ncbi.datasets.openapi.models.v2reports_organism.v2reportsOrganism(
                            tax_id = 56, 
                            sci_name = '', 
                            organism_name = '', 
                            common_name = '', 
                            lineage = [
                                ncbi.datasets.openapi.models.v2reports_lineage_organism.v2reportsLineageOrganism(
                                    tax_id = 56, 
                                    name = '', )
                                ], 
                            strain = '', 
                            pangolin_classification = '', 
                            infraspecific_names = ncbi.datasets.openapi.models.v2reports_infraspecific_names.v2reportsInfraspecificNames(
                                breed = '', 
                                cultivar = '', 
                                ecotype = '', 
                                isolate = '', 
                                sex = '', 
                                strain = '', ), ), 
                        comment = '', ), 
                    owner = ncbi.datasets.openapi.models.v2reports_bio_sample_owner.v2reportsBioSampleOwner(
                        name = '', 
                        contacts = [
                            ncbi.datasets.openapi.models.v2reports_bio_sample_contact.v2reportsBioSampleContact(
                                lab = '', )
                            ], ), 
                    models = [
                        ''
                        ], 
                    bioprojects = [
                        ncbi.datasets.openapi.models.v2reports_bio_project.v2reportsBioProject(
                            accession = '', 
                            title = '', 
                            parent_accession = '', 
                            parent_accessions = [
                                ''
                                ], )
                        ], 
                    package = '', 
                    attributes = [
                        ncbi.datasets.openapi.models.v2reports_bio_sample_attribute.v2reportsBioSampleAttribute(
                            name = '', 
                            value = '', )
                        ], 
                    status = ncbi.datasets.openapi.models.v2reports_bio_sample_status.v2reportsBioSampleStatus(
                        when = '', ), 
                    age = '', 
                    biomaterial_provider = '', 
                    breed = '', 
                    collected_by = '', 
                    collection_date = '', 
                    cultivar = '', 
                    dev_stage = '', 
                    ecotype = '', 
                    geo_loc_name = '', 
                    host = '', 
                    host_disease = '', 
                    identified_by = '', 
                    ifsac_category = '', 
                    isolate = '', 
                    isolate_name_alias = '', 
                    isolation_source = '', 
                    lat_lon = '', 
                    project_name = '', 
                    sample_name = '', 
                    serovar = '', 
                    sex = '', 
                    source_type = '', 
                    strain = '', 
                    sub_species = '', 
                    tissue = '', 
                    serotype = '', ),
                blast_url = '',
                comments = '',
                suppression_reason = '',
                diploid_role = 'LINKED_ASSEMBLY_TYPE_UNKNOWN'
            )
        else:
            return V2reportsAssemblyInfo(
        )
        """

    def testV2reportsAssemblyInfo(self):
        """Test V2reportsAssemblyInfo"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
