# coding: utf-8

"""
    NCBI Datasets API

    ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ncbi.datasets.openapi.models.v2reports_organelle import V2reportsOrganelle

class TestV2reportsOrganelle(unittest.TestCase):
    """V2reportsOrganelle unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2reportsOrganelle:
        """Test V2reportsOrganelle
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2reportsOrganelle`
        """
        model = V2reportsOrganelle()
        if include_optional:
            return V2reportsOrganelle(
                description = 'ORGANELLE_TYPE_UNKNOWN',
                genbank = ncbi.datasets.openapi.models.v2reports_sequence_information.v2reportsSequenceInformation(
                    accession = '', 
                    submission_date = '', 
                    submitter = '', ),
                refseq = ncbi.datasets.openapi.models.v2reports_sequence_information.v2reportsSequenceInformation(
                    accession = '', 
                    submission_date = '', 
                    submitter = '', ),
                organism = ncbi.datasets.openapi.models.v2reports_organism.v2reportsOrganism(
                    tax_id = 56, 
                    sci_name = '', 
                    organism_name = '', 
                    common_name = '', 
                    lineage = [
                        ncbi.datasets.openapi.models.v2reports_lineage_organism.v2reportsLineageOrganism(
                            tax_id = 56, 
                            name = '', )
                        ], 
                    strain = '', 
                    pangolin_classification = '', 
                    infraspecific_names = ncbi.datasets.openapi.models.v2reports_infraspecific_names.v2reportsInfraspecificNames(
                        breed = '', 
                        cultivar = '', 
                        ecotype = '', 
                        isolate = '', 
                        sex = '', 
                        strain = '', ), ),
                bioprojects = [
                    ncbi.datasets.openapi.models.v2reports_bio_project.v2reportsBioProject(
                        accession = '', 
                        title = '', 
                        parent_accession = '', 
                        parent_accessions = [
                            ''
                            ], )
                    ],
                biosample = ncbi.datasets.openapi.models.v2reports_organelle_biosample.v2reportsOrganelleBiosample(
                    accession = '', ),
                gene_counts = ncbi.datasets.openapi.models.v2reports_organelle_gene_counts.v2reportsOrganelleGeneCounts(
                    total = 56, 
                    protein_coding = 56, 
                    rrna = 56, 
                    trna = 56, 
                    lncrna = 56, ),
                length = 56,
                topology = 'TOPOLOGY_UNKNOWN',
                gene_count = 56
            )
        else:
            return V2reportsOrganelle(
        )
        """

    def testV2reportsOrganelle(self):
        """Test V2reportsOrganelle"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
