# coding: utf-8

"""
    NCBI Datasets API

    ### NCBI Datasets is a resource that lets you easily gather data from NCBI. The Datasets version 2 API is still in alpha, and we're updating it often to add new functionality, iron out bugs and enhance usability. For some larger downloads, you may want to download a [dehydrated zip archive](https://www.ncbi.nlm.nih.gov/datasets/docs/v2/how-tos/genomes/large-download/), and retrieve the individual data files at a later time. 

    The version of the OpenAPI document: v2
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


import unittest

from ncbi.datasets.openapi.models.v2archive_catalog import V2archiveCatalog

class TestV2archiveCatalog(unittest.TestCase):
    """V2archiveCatalog unit test stubs"""

    def setUp(self):
        pass

    def tearDown(self):
        pass

    def make_instance(self, include_optional) -> V2archiveCatalog:
        """Test V2archiveCatalog
            include_optional is a boolean, when False only required
            params are included, when True both required and
            optional params are included """
        # uncomment below to create an instance of `V2archiveCatalog`
        """
        model = V2archiveCatalog()
        if include_optional:
            return V2archiveCatalog(
                accession = '',
                molecule_type = 'MOLECULE_TYPE_UNSPECIFIED',
                definition = '',
                taxonomy = ncbi.datasets.openapi.models.v2archive_taxonomy_node.v2archiveTaxonomyNode(
                    tax_id = 56, 
                    current_scientific_name = ncbi.datasets.openapi.models.v2reports_name_and_authority.v2reportsNameAndAuthority(
                        name = '', 
                        authority = '', 
                        type_strains = [
                            ncbi.datasets.openapi.models.v2reports_taxonomy_type_material.v2reportsTaxonomyTypeMaterial(
                                type_strain_name = '', 
                                type_strain_id = '', 
                                bio_collection_id = '', 
                                bio_collection_name = '', 
                                collection_type = [
                                    'no_collection_type'
                                    ], 
                                type_class = '', )
                            ], 
                        curator_synonym = '', 
                        homotypic_synonyms = [
                            ncbi.datasets.openapi.models.v2reports_name_and_authority.v2reportsNameAndAuthority(
                                name = '', 
                                authority = '', 
                                curator_synonym = '', 
                                heterotypic_synonyms = [
                                    
                                    ], 
                                other_synonyms = [
                                    
                                    ], 
                                informal_names = [
                                    ''
                                    ], 
                                basionym = , 
                                publications = [
                                    ncbi.datasets.openapi.models.v2reports_name_and_authority_publication.v2reportsNameAndAuthorityPublication(
                                        name = '', 
                                        citation = '', )
                                    ], 
                                notes = [
                                    ncbi.datasets.openapi.models.v2reports_name_and_authority_note.v2reportsNameAndAuthorityNote(
                                        name = '', 
                                        note = '', 
                                        note_classifier = 'no_authority_classifier', )
                                    ], 
                                formal = True, )
                            ], 
                        heterotypic_synonyms = [
                            
                            ], 
                        other_synonyms = [
                            
                            ], 
                        informal_names = [
                            ''
                            ], 
                        basionym = , 
                        publications = [
                            ncbi.datasets.openapi.models.v2reports_name_and_authority_publication.v2reportsNameAndAuthorityPublication(
                                name = '', 
                                citation = '', )
                            ], 
                        notes = [
                            ncbi.datasets.openapi.models.v2reports_name_and_authority_note.v2reportsNameAndAuthorityNote(
                                name = '', 
                                note = '', )
                            ], 
                        formal = True, ), 
                    basionym = , 
                    curator_common_name = '', 
                    group_name = '', 
                    classification = ncbi.datasets.openapi.models.v2reports_classification.v2reportsClassification(
                        superkingdom = ncbi.datasets.openapi.models.v2reports_tax_data.v2reportsTaxData(
                            name = '', 
                            id = 56, ), 
                        kingdom = ncbi.datasets.openapi.models.v2reports_tax_data.v2reportsTaxData(
                            name = '', 
                            id = 56, ), 
                        phylum = , 
                        class = , 
                        order = , 
                        family = , 
                        genus = , 
                        species = , 
                        domain = , 
                        realm = , 
                        acellular_root = , ), 
                    modifiers = [
                        ncbi.datasets.openapi.models.v2archive_modifier.v2archiveModifier(
                            subtype = 'unknown', 
                            subname = '', )
                        ], ),
                sequence = ncbi.datasets.openapi.models.v2archive_sequence.v2archiveSequence(
                    length = 56, 
                    units = 'SEQUENCE_LENGTH_UNITS_UNSPECIFIED', ),
                topology = 'TOPOLOGY_UNKNOWN',
                modification_date = '',
                publication_date = '',
                submitters = [
                    ncbi.datasets.openapi.models.v2archive_submitter.v2archiveSubmitter(
                        name = [
                            ncbi.datasets.openapi.models.v2archive_name.v2archiveName(
                                first = '', 
                                middle = '', 
                                last = '', 
                                full = '', 
                                initials = '', 
                                suffix = '', 
                                title = '', 
                                affiliation = ncbi.datasets.openapi.models.v2archive_affiliation.v2archiveAffiliation(
                                    division = '', 
                                    location = ncbi.datasets.openapi.models.v2archive_location.v2archiveLocation(
                                        city = '', 
                                        sub = '', 
                                        country = '', 
                                        street = '', 
                                        postal_code = '', ), ), )
                            ], 
                        role = '', 
                        affiliation = ncbi.datasets.openapi.models.v2archive_affiliation.v2archiveAffiliation(
                            division = '', ), 
                        date = '', )
                    ]
            )
        else:
            return V2archiveCatalog(
        )
        """

    def testV2archiveCatalog(self):
        """Test V2archiveCatalog"""
        # inst_req_only = self.make_instance(include_optional=False)
        # inst_req_and_optional = self.make_instance(include_optional=True)

if __name__ == '__main__':
    unittest.main()
